import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –¢–æ–∫–µ–Ω —ñ chat_id
BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425

# –ü–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
user_settings = {
    "margin": 100,
    "leverage": {"SOL": 300, "BTC": 500, "ETH": 500},
    "coins": ["SOL", "BTC", "ETH"],
    "auto_signals": True
}

# –ö–Ω–æ–ø–∫–∏
def main_keyboard():
    return ReplyKeyboardMarkup([
        ["–ó–∞–ø–∏—Ç–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏", "–ó—É–ø–∏–Ω–∏—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏"],
        ["–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ", "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É"],
        ["–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", "–í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–Ω–µ—Ç—É"]
    ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_keyboard())
    context.chat_data["awaiting"] = None

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text
    awaiting = context.chat_data.get("awaiting")

    if awaiting == "change_margin":
        try:
            user_settings["margin"] = int(msg)
            await update.message.reply_text(f"–ú–∞—Ä–∂–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ {msg}$")
        except:
            await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        context.chat_data["awaiting"] = None
        return

    if awaiting == "choose_leverage_coin":
        context.chat_data["coin_to_change"] = msg.upper()
        context.chat_data["awaiting"] = "set_new_leverage"
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤–µ –ø–ª–µ—á–µ:")
        return

    if awaiting == "set_new_leverage":
        coin = context.chat_data.get("coin_to_change", "SOL")
        try:
            user_settings["leverage"][coin] = int(msg)
            await update.message.reply_text(f"–ü–ª–µ—á–µ –¥–ª—è {coin} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {msg}√ó")
        except:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        context.chat_data["awaiting"] = None
        return

    if awaiting == "add_coin":
        coin = msg.upper()
        if coin not in user_settings["coins"]:
            user_settings["coins"].append(coin)
            await update.message.reply_text(f"–ú–æ–Ω–µ—Ç—É {coin} –¥–æ–¥–∞–Ω–æ.")
        else:
            await update.message.reply_text("–ú–æ–Ω–µ—Ç–∞ –≤–∂–µ —î.")
        context.chat_data["awaiting"] = None
        return

    if awaiting == "remove_coin":
        coin = msg.upper()
        if coin in user_settings["coins"]:
            user_settings["coins"].remove(coin)
            await update.message.reply_text(f"–ú–æ–Ω–µ—Ç—É {coin} –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await update.message.reply_text("–¢–∞–∫–æ—ó –º–æ–Ω–µ—Ç–∏ –Ω–µ–º–∞.")
        context.chat_data["awaiting"] = None
        return

    # –î—ñ—ó –ø–æ –∫–Ω–æ–ø–∫–∞—Ö
    if msg == "–ó–∞–ø–∏—Ç–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏":
        await update.message.reply_text("üìà –°–∏–≥–Ω–∞–ª: LONG –ø–æ SOL\n–í—Ö—ñ–¥: $182.00\nSL: $180.50\nTP: $187.00\n–ü–ª–µ—á–µ: 300√ó\n–ú–∞—Ä–∂–∞: $100")
    elif msg == "–ó—É–ø–∏–Ω–∏—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏":
        user_settings["auto_signals"] = False
        await update.message.reply_text("‚õîÔ∏è –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–∏ –∑—É–ø–∏–Ω–µ–Ω–æ.")
    elif msg == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ":
        context.chat_data["awaiting"] = "choose_leverage_coin"
        await update.message.reply_text("–í–≤–µ–¥–∏ –º–æ–Ω–µ—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: SOL):")
    elif msg == "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É":
        context.chat_data["awaiting"] = "change_margin"
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É –º–∞—Ä–∂—É ($):")
    elif msg == "–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É":
        context.chat_data["awaiting"] = "add_coin"
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è:")
    elif msg == "–í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–Ω–µ—Ç—É":
        context.chat_data["awaiting"] = "remove_coin"
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    else:
        await update.message.reply_text("–ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ. –û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ ‚úÖ")
    app.run_polling()

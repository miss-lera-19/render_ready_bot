import asyncio
import logging
import os
import time
import aiohttp
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    JobQueue,
)

BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425

coins = ["SOL", "PEPE", "BTC", "ETH"]
leverage = {"SOL": 300, "PEPE": 300, "BTC": 500, "ETH": 500}
margin = 100

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

async def get_price(symbol: str) -> float:
    url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}USDT"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=5) as resp:
                data = await resp.json()
                return float(data["price"])
    except Exception:
        return None

async def generate_signal(symbol: str, price: float) -> str:
    lev = leverage[symbol]
    entry = round(price, 5 if symbol == "PEPE" else 2)
    tp = round(entry * 1.02, 5 if symbol == "PEPE" else 2)
    sl = round(entry * 0.985, 5 if symbol == "PEPE" else 2)
    direction = "LONG" if symbol in ["SOL", "PEPE"] else "SHORT"

    return (
        f"üì° –°–∏–≥–Ω–∞–ª ({symbol}/USDT)\n"
        f"‚û°Ô∏è –ù–∞–ø—Ä—è–º: *{direction}*\n"
        f"üí∞ –í—Ö—ñ–¥: `{entry}`\n"
        f"üéØ TP: `{tp}`\n"
        f"üõ° SL: `{sl}`\n"
        f"üíµ –ú–∞—Ä–∂–∞: `${margin}`\n"
        f"üí• –ü–ª–µ—á–µ: `{lev}√ó`\n"
        f"#trade #signal #crypto"
    )

async def check_market(context: ContextTypes.DEFAULT_TYPE):
    for coin in coins:
        price = await get_price(coin)
        if price:
            signal = await generate_signal(coin, price)
            await context.bot.send_message(chat_id=CHAT_ID, text=signal, parse_mode="Markdown")
        else:
            await context.bot.send_message(chat_id=CHAT_ID, text=f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É {coin}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑"], ["–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ", "–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π.", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global margin
    text = update.message.text

    if text == "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑":
        msg = ""
        for coin in coins:
            price = await get_price(coin)
            if price:
                msg += f"{coin}/USDT: {price}\n"
            else:
                msg += f"{coin}/USDT: –ø–æ–º–∏–ª–∫–∞\n"
        await update.message.reply_text(msg)

    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É –º–∞—Ä–∂—É —É $ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 150):")
        context.user_data["expecting_margin"] = True

    elif context.user_data.get("expecting_margin"):
        try:
            new_margin = int(text)
            margin = new_margin
            await update.message.reply_text(f"‚úÖ –ù–æ–≤–∞ –º–∞—Ä–∂–∞: ${margin}")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        context.user_data["expecting_margin"] = False

    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏ –º–æ–Ω–µ—Ç—É —ñ –Ω–æ–≤–µ –ø–ª–µ—á–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: BTC 400):")
        context.user_data["expecting_leverage"] = True

    elif context.user_data.get("expecting_leverage"):
        parts = text.split()
        if len(parts) == 2 and parts[0].upper() in coins and parts[1].isdigit():
            coin = parts[0].upper()
            leverage[coin] = int(parts[1])
            await update.message.reply_text(f"‚úÖ –ù–æ–≤–µ –ø–ª–µ—á–µ –¥–ª—è {coin}: {leverage[coin]}√ó")
        else:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: COIN 300")
        context.user_data["expecting_leverage"] = False

    elif text == "–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –º–æ–Ω–µ—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: DOGE):")
        context.user_data["expecting_coin"] = True

    elif context.user_data.get("expecting_coin"):
        coin = text.upper()
        if coin not in coins:
            coins.append(coin)
            leverage[coin] = 300
            await update.message.reply_text(f"‚úÖ –ú–æ–Ω–µ—Ç–∞ {coin} –¥–æ–¥–∞–Ω–∞ –∑ –ø–ª–µ—á–µ–º 300√ó")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ –≤–∂–µ —î")
        context.user_data["expecting_coin"] = False

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    await app.initialize()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    job_queue = app.job_queue
    job_queue.run_repeating(check_market, interval=30, first=10)

    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    asyncio.run(main())

import os
import logging
import requests
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters
)

BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425

# –ü–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
margin = 100
leverage = {"SOLUSDT": 300, "BTCUSDT": 500, "ETHUSDT": 500}
symbols = ["SOLUSDT", "BTCUSDT", "ETHUSDT"]

# –ö–Ω–æ–ø–∫–∏
main_menu = ReplyKeyboardMarkup(
    [["–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑"], ["–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ"]],
    resize_keyboard=True
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ MEXC API
def get_price(symbol):
    try:
        url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}"
        response = requests.get(url, timeout=10)
        data = response.json()
        return float(data["price"])
    except:
        return None

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É
def generate_signal(symbol, price):
    if not price:
        return None

    sl = round(price * 0.995, 4)
    tp = round(price * 1.05, 4)
    direction = "LONG" if price > sl else "SHORT"

    lev = leverage.get(symbol, 100)
    used_margin = margin

    return f"""üì¢ –¢–æ—Ä–≥–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª ({symbol})
–ù–∞–ø—Ä—è–º: {direction}
–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {price}
Stop Loss: {sl}
Take Profit: {tp}
–ú–∞—Ä–∂–∞: ${used_margin}
–ü–ª–µ—á–µ: {lev}√ó"""

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ñ—Ç–∞—é! üëã –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=main_menu)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global margin
    msg = update.message.text

    if msg == "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑":
        message = ""
        for symbol in symbols:
            price = get_price(symbol)
            message += f"{symbol}: {price}\n" if price else f"{symbol}: –ø–æ–º–∏–ª–∫–∞\n"
        await update.message.reply_text(message)

    elif msg == "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º–∞—Ä–∂—É —É $:")

    elif msg == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ":
        await update.message.reply_text("–§—É–Ω–∫—Ü—ñ—è –∑–º—ñ–Ω–∏ –ø–ª–µ—á–∞ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")

    elif msg.isdigit():
        margin = int(msg)
        await update.message.reply_text(f"–ú–∞—Ä–∂–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ ${margin}")

    else:
        await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=main_menu)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∏–Ω–∫—É
async def market_check(app):
    while True:
        try:
            for symbol in symbols:
                price = get_price(symbol)
                signal = generate_signal(symbol, price)
                if signal:
                    await app.bot.send_message(chat_id=CHAT_ID, text=signal)
            await asyncio.sleep(60)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–∏–Ω–∫—É: {e}")
            await asyncio.sleep(60)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    async def main():
        app = ApplicationBuilder().token(BOT_TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        asyncio.create_task(market_check(app))

        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        await app.updater.idle()

    asyncio.run(main())

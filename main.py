
import logging
import asyncio
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
import aiohttp

BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425
coins = ["SOL_USDT", "PEPE_USDT", "BTC_USDT", "ETH_USDT"]
leverage = {"SOL_USDT": 300, "PEPE_USDT": 300, "BTC_USDT": 500, "ETH_USDT": 500}
margin = 100

keyboard = [["–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ"], ["–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑"]]
markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é ‚¨áÔ∏è", reply_markup=markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global margin
    text = update.message.text
    if text == "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑":
        await update.message.reply_text("–¶—ñ–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è...")
        await send_prices(context)
    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É –º–∞—Ä–∂—É ($):")
        context.user_data["awaiting_margin"] = True
    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ":
        await update.message.reply_text("–§—É–Ω–∫—Ü—ñ—è –∑–º—ñ–Ω–∏ –ø–ª–µ—á–∞ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")
    elif text == "–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –º–æ–Ω–µ—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ XXX_USDT:")
        context.user_data["awaiting_coin"] = True
    elif context.user_data.get("awaiting_margin"):
        try:
            margin = float(text)
            await update.message.reply_text(f"–ú–∞—Ä–∂–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞: {margin}$")
        except:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        context.user_data["awaiting_margin"] = False
    elif context.user_data.get("awaiting_coin"):
        coin = text.upper()
        if coin not in coins:
            coins.append(coin)
            leverage[coin] = 300
            await update.message.reply_text(f"–ú–æ–Ω–µ—Ç—É {coin} –¥–æ–¥–∞–Ω–æ.")
        else:
            await update.message.reply_text("–ú–æ–Ω–µ—Ç–∞ –≤–∂–µ —ñ—Å–Ω—É—î.")
        context.user_data["awaiting_coin"] = False

async def send_prices(context: ContextTypes.DEFAULT_TYPE):
    async with aiohttp.ClientSession() as session:
        messages = []
        for coin in coins:
            try:
                async with session.get(f"https://api.mexc.com/api/v3/ticker/price?symbol={coin}") as resp:
                    data = await resp.json()
                    price = float(data["price"])
                    signal = await generate_signal(coin, price)
                    messages.append(signal)
            except:
                messages.append(f"‚ùå {coin}: –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏")
        await context.bot.send_message(chat_id=CHAT_ID, text="\n".join(messages))

async def generate_signal(coin, price):
    # –°–ø—Ä–æ—â–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è —ñ–º–ø—É–ª—å—Å—É (–¥–µ–º–æ –ª–æ–≥—ñ–∫–∞)
    direction = "LONG" if price % 2 > 1 else "SHORT"
    sl = round(price * (0.995 if direction == "LONG" else 1.005), 4)
    tp = round(price * (1.05 if direction == "LONG" else 0.95), 4)
    lev = leverage.get(coin, 100)
    return f"üìà –°–∏–≥–Ω–∞–ª {direction} –ø–æ {coin}\n–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {price}\nSL: {sl}\nTP: {tp}\n–ú–∞—Ä–∂–∞: ${margin}\n–ü–ª–µ—á–µ: {lev}√ó"

async def periodic_check(app):
    while True:
        try:
            await send_prices(app.bot)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        await asyncio.sleep(30)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.job_queue.run_once(lambda ctx: send_prices(ctx), when=5)
    asyncio.create_task(periodic_check(app))
    app.run_polling()

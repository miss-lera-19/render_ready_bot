import logging
import requests
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, CommandHandler, ContextTypes, MessageHandler, filters
from flask import Flask
from threading import Thread

# üîê –¢–æ–∫–µ–Ω —ñ —á–∞—Ç
BOT_TOKEN = '8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34'
CHAT_ID = '681357425'

# ‚öôÔ∏è –ü–æ—á–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
user_settings = {
    "margin": 100,
    "leverage": {
        "SOL": 300,
        "BTC": 500,
        "ETH": 500
    },
    "symbols": ["SOLUSDT", "BTCUSDT", "ETHUSDT"]
}

# üåê –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ —Ç–∞ –æ–± º—î–º—É –∑ MEXC
def get_price_and_volume(symbol):
    try:
        url = f"https://api.mexc.com/api/v3/klines?symbol={symbol}&interval=1m&limit=20"
        response = requests.get(url, timeout=10)
        data = response.json()
        if isinstance(data, list):
            prices = [float(c[4]) for c in data]
            volumes = [float(c[5]) for c in data]
            return prices, volumes
        else:
            return None, None
    except:
        return None, None

# üìä –ê–Ω–∞–ª—ñ–∑ —ñ —Å–∏–≥–Ω–∞–ª
def analyze_and_create_signal(symbol):
    prices, volumes = get_price_and_volume(symbol)
    if not prices or not volumes:
        return None

    last_price = prices[-1]
    avg_volume = sum(volumes[:-1]) / len(volumes[:-1])
    last_volume = volumes[-1]
    direction = "LONG" if prices[-1] > prices[-2] else "SHORT"
    impulse = abs(prices[-1] - prices[-2]) > 0.001 * prices[-2]

    if last_volume >= avg_volume and impulse:
        leverage = user_settings['leverage'].get(symbol.replace("USDT", ""), 100)
        margin = user_settings['margin']
        entry_price = round(last_price, 4)
        sl = round(entry_price * (0.98 if direction == "LONG" else 1.02), 4)
        tp = round(entry_price * (1.05 if direction == "LONG" else 0.95), 4)

        return (
            f"‚ö°Ô∏è –ù–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª: {direction}\n"
            f"–ú–æ–Ω–µ—Ç–∞: {symbol}\n"
            f"–í—Ö—ñ–¥: {entry_price} USDT\n"
            f"Stop Loss: {sl} USDT\n"
            f"Take Profit: {tp} USDT\n"
            f"–ú–∞—Ä–∂–∞: ${margin}\n"
            f"–ü–ª–µ—á–µ: {leverage}√ó\n"
            f"‚è± 1-—Ö–≤ —ñ–Ω—Ç–µ—Ä–≤–∞–ª | –û–± º—î–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ"
        )
    return None

# üîÅ –¶–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–∏–Ω–∫—É
async def check_market(app):
    while True:
        for symbol in user_settings["symbols"]:
            signal = analyze_and_create_signal(symbol)
            if signal:
                await app.bot.send_message(chat_id=CHAT_ID, text=signal)
        await asyncio.sleep(60)

# üì¶ –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", callback_data='change_margin')],
        [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ", callback_data='change_leverage')],
        [InlineKeyboardButton("–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑", callback_data='get_prices')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! ‚úÖ", reply_markup=reply_markup)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–ø—Ä–∏–≤—ñ—Ç" in text or "/start" in text:
        await start(update, context)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'get_prices':
        prices_text = ""
        for symbol in user_settings["symbols"]:
            prices, _ = get_price_and_volume(symbol)
            if prices:
                prices_text += f"{symbol}: {prices[-1]} USDT\n"
        await query.edit_message_text(f"üìä –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏:\n{prices_text}")

    elif query.data == 'change_margin':
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º–∞—Ä–∂—É –≤ $:")
        context.user_data["awaiting_margin"] = True

    elif query.data == 'change_leverage':
        await query.edit_message_text("‚úèÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: SOL 200")

# üß† –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if context.user_data.get("awaiting_margin"):
        try:
            margin = int(text)
            user_settings["margin"] = margin
            await update.message.reply_text(f"‚úÖ –ù–æ–≤–∞ –º–∞—Ä–∂–∞: ${margin}")
        except:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ.")
        context.user_data["awaiting_margin"] = False

    elif len(text.split()) == 2:
        coin, lev = text.split()
        if coin.upper() in user_settings["leverage"]:
            try:
                lev = int(lev)
                user_settings["leverage"][coin.upper()] = lev
                await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–µ –¥–ª—è {coin.upper()} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {lev}√ó")
            except:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ –ø—ñ—Å–ª—è –º–æ–Ω–µ—Ç–∏.")

# üåê Flask –¥–ª—è Render
app_flask = Flask(__name__)
@app_flask.route('/')
def index():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î ‚úÖ"

def run_flask():
    app_flask.run(host='0.0.0.0', port=10000)

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    tg_app = ApplicationBuilder().token(BOT_TOKEN).build()

    tg_app.add_handler(CommandHandler('start', start))
    tg_app.add_handler(CallbackQueryHandler(button_handler))
    tg_app.add_handler(MessageHandler(filters.TEXT, message_handler))
    tg_app.add_handler(MessageHandler(filters.TEXT, text_handler))

    Thread(target=run_flask).start()
    tg_app.run_polling()
    asyncio.run(check_market(tg_app))

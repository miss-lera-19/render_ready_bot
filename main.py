import os
import asyncio
import logging
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# üîê –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425
MEXC_API_KEY = "mx0vglwSqWMNfUkdXo"
MEXC_SECRET_KEY = "7107c871e7dc4e3db79f4fddb07e917d"

# üìà –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
user_margin = 100
user_leverage = {
    'SOL': 300,
    'PEPE': 300,
    'BTC': 500,
    'ETH': 500
}
coins = ['SOL', 'PEPE', 'BTC', 'ETH']

logging.basicConfig(level=logging.INFO)

# üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –∑ MEXC API
def get_price(symbol):
    try:
        response = requests.get(f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}USDT")
        data = response.json()
        return float(data['price'])
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}")
        return None

# ü§ñ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑"], ["–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ"], ["–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é ‚¨áÔ∏è", reply_markup=reply_markup)

# üì≤ –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global user_margin
    text = update.message.text

    if text == "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑":
        await update.message.reply_text("–¶—ñ–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è...")
        for coin in coins:
            price = get_price(coin)
            if price:
                await update.message.reply_text(f"{coin}/USDT: ${price}")
            else:
                await update.message.reply_text(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {coin}")
    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É –º–∞—Ä–∂—É —É $:")
        context.user_data["change_margin"] = True
    elif context.user_data.get("change_margin"):
        try:
            user_margin = float(text)
            await update.message.reply_text(f"–ú–∞—Ä–∂—É –æ–Ω–æ–≤–ª–µ–Ω–æ: ${user_margin}")
        except:
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.")
        context.user_data["change_margin"] = False
    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –º–æ–Ω–µ—Ç—É —ñ –Ω–æ–≤–µ –ø–ª–µ—á–µ, –Ω–∞–ø—Ä: SOL 300")
        context.user_data["change_leverage"] = True
    elif context.user_data.get("change_leverage"):
        try:
            parts = text.split()
            coin, lev = parts[0].upper(), int(parts[1])
            if coin in user_leverage:
                user_leverage[coin] = lev
                await update.message.reply_text(f"–ü–ª–µ—á–µ –¥–ª—è {coin} –æ–Ω–æ–≤–ª–µ–Ω–æ: {lev}√ó")
            else:
                await update.message.reply_text("–ú–æ–Ω–µ—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        except:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: BTC 500")
        context.user_data["change_leverage"] = False
    elif text == "–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É –º–æ–Ω–µ—Ç—É (—Ç—ñ–ª—å–∫–∏ —Å–∏–º–≤–æ–ª, –Ω–∞–ø—Ä: XRP)")
        context.user_data["add_coin"] = True
    elif context.user_data.get("add_coin"):
        new_coin = text.upper()
        if new_coin not in coins:
            coins.append(new_coin)
            user_leverage[new_coin] = 100
            await update.message.reply_text(f"–ú–æ–Ω–µ—Ç—É {new_coin} –¥–æ–¥–∞–Ω–æ!")
        else:
            await update.message.reply_text("–¶—è –º–æ–Ω–µ—Ç–∞ –≤–∂–µ —î.")
        context.user_data["add_coin"] = False
    elif text.lower() in ["–ø—Ä–∏–≤—ñ—Ç", "hi", "hello"]:
        await start(update, context)

# üìâ –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤
async def check_market(context: ContextTypes.DEFAULT_TYPE):
    for coin in coins:
        price = get_price(coin)
        if not price:
            continue

        # –°—Ç—Ä–∞—Ç–µ–≥—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ–º–ø—É–ª—å—Å—É: —Å–∏–º—É–ª—è—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—É
        signal_type = "LONG" if int(price * 100) % 2 == 0 else "SHORT"
        entry_price = round(price, 4)
        sl = round(entry_price * (0.98 if signal_type == "LONG" else 1.02), 4)
        tp = round(entry_price * (1.05 if signal_type == "LONG" else 0.95), 4)
        lev = user_leverage.get(coin, 100)

        signal = (
            f"üìä {coin}/USDT {signal_type} —Å–∏–≥–Ω–∞–ª\n"
            f"üí∞ –í—Ö—ñ–¥: {entry_price}\n"
            f"üõ°Ô∏è SL: {sl}\n"
            f"üéØ TP: {tp}\n"
            f"üíµ –ú–∞—Ä–∂–∞: ${user_margin} | –ü–ª–µ—á–µ: {lev}√ó"
        )
        await context.bot.send_message(chat_id=CHAT_ID, text=signal)

# üü¢ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    async def main():
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        job = app.job_queue
        job.run_repeating(check_market, interval=30, first=10)  # –©–æ 30 —Å–µ–∫—É–Ω–¥

        print("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î...")
        await app.run_polling()

    asyncio.run(main())

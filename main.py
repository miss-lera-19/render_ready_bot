import logging
import asyncio
import os
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425

coins = {
    "SOLUSDT": {"leverage": 300},
    "BTCUSDT": {"leverage": 500},
    "ETHUSDT": {"leverage": 500}
}
margin = 100

reply_keyboard = [
    ["–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ"],
    ["–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑"]
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! ‚úÖ", reply_markup=markup)

async def show_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "üìä –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏:\n"
    for symbol in coins:
        try:
            response = requests.get(
                f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}"
            )
            price = float(response.json()["price"])
            msg += f"{symbol}: {price} USDT\n"
        except Exception:
            msg += f"{symbol}: ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è\n"
    await update.message.reply_text(msg)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global margin

    text = update.message.text.strip()

    if text == "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑":
        await show_prices(update, context)
    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É –º–∞—Ä–∂—É $:")
        context.user_data["awaiting_margin"] = True
    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –º–æ–Ω–µ—Ç—É —ñ –ø–ª–µ—á–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: SOLUSDT 200):")
        context.user_data["awaiting_leverage"] = True
    elif text == "–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –º–æ–Ω–µ—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: XRPUSDT):")
        context.user_data["awaiting_new_coin"] = True
    elif context.user_data.get("awaiting_margin"):
        try:
            margin = int(text)
            await update.message.reply_text(f"–ù–æ–≤–∞ –º–∞—Ä–∂–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${margin}")
        except:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        context.user_data["awaiting_margin"] = False
    elif context.user_data.get("awaiting_leverage"):
        try:
            parts = text.upper().split()
            if len(parts) == 2 and parts[0] in coins:
                coins[parts[0]]["leverage"] = int(parts[1])
                await update.message.reply_text(f"–ü–ª–µ—á–µ –¥–ª—è {parts[0]} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {parts[1]}√ó")
            else:
                await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–±–æ –º–æ–Ω–µ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        except:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞! –í–≤–µ–¥–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: SOLUSDT 200")
        context.user_data["awaiting_leverage"] = False
    elif context.user_data.get("awaiting_new_coin"):
        symbol = text.upper()
        try:
            r = requests.get(f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}")
            if "price" in r.json():
                coins[symbol] = {"leverage": 100}
                await update.message.reply_text(f"–ú–æ–Ω–µ—Ç–∞ {symbol} –¥–æ–¥–∞–Ω–∞!")
            else:
                await update.message.reply_text("–ú–æ–Ω–µ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        except:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –º–æ–Ω–µ—Ç–∏.")
        context.user_data["awaiting_new_coin"] = False
    else:
        await update.message.reply_text("–í–∏–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é üëá", reply_markup=markup)

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î...")
    app.run_polling()

if __name__ == "__main__":
    main()

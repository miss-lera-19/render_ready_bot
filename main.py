import asyncio
import logging
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
import aiohttp

# --- –ó–º—ñ–Ω–Ω—ñ ---
BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425
MEXC_API_KEY = "mx0vglwSqWMNfUkdXo"
MEXC_SECRET_KEY = "7107c871e7dc4e3db79f4fddb07e917d"

# --- –ü–æ—á–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ---
user_data = {
    "margin": 100,
    "leverage": {
        "SOLUSDT": 300,
        "BTCUSDT": 500,
        "ETHUSDT": 500
    },
    "symbols": ["SOLUSDT", "BTCUSDT", "ETHUSDT"]
}

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ ---
logging.basicConfig(level=logging.INFO)

# --- –ö–Ω–æ–ø–∫–∏ ---
keyboard = [
    ["–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ"],
    ["–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑"]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ ---
async def get_price(symbol):
    url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                data = await resp.json()
                return float(data["price"])
    except Exception:
        return None

# --- –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—ñ–Ω–∏ ---
async def show_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìä –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏:\n"
    for symbol in user_data["symbols"]:
        price = await get_price(symbol)
        if price:
            text += f"{symbol}: {price:.2f} USDT\n"
        else:
            text += f"{symbol}: –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏\n"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)

# --- –ö–æ–º–∞–Ω–¥–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! ‚úÖ", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text
    if msg == "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑":
        await show_prices(update, context)
    elif msg == "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É –º–∞—Ä–∂—É (—É $):")
        context.user_data["awaiting"] = "margin"
    elif msg == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏ –º–æ–Ω–µ—Ç—É —Ç–∞ –Ω–æ–≤–µ –ø–ª–µ—á–µ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: SOLUSDT 350")
        context.user_data["awaiting"] = "leverage"
    elif msg == "–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: DOGEUSDT):")
        context.user_data["awaiting"] = "add_symbol"
    else:
        await process_user_input(update, context, msg)

# --- –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
async def process_user_input(update, context, msg):
    waiting = context.user_data.get("awaiting")
    if waiting == "margin":
        try:
            user_data["margin"] = float(msg)
            await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${msg}")
        except:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    elif waiting == "leverage":
        try:
            parts = msg.split()
            symbol = parts[0].upper()
            lev = int(parts[1])
            user_data["leverage"][symbol] = lev
            await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–µ –¥–ª—è {symbol} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {lev}√ó")
        except:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞. –ü—Ä–∏–∫–ª–∞–¥: SOLUSDT 350")
    elif waiting == "add_symbol":
        symbol = msg.upper()
        if symbol not in user_data["symbols"]:
            user_data["symbols"].append(symbol)
            user_data["leverage"][symbol] = 100  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –ø–ª–µ—á–µ
            await update.message.reply_text(f"‚úÖ –ú–æ–Ω–µ—Ç—É {symbol} –¥–æ–¥–∞–Ω–æ.")
        else:
            await update.message.reply_text(f"{symbol} –≤–∂–µ —î –≤ —Å–ø–∏—Å–∫—É.")
    context.user_data["awaiting"] = None

# --- –°—Ç—Ä–∞—Ç–µ–≥—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤ ---
async def check_market_and_send_signals(app):
    while True:
        for symbol in user_data["symbols"]:
            price = await get_price(symbol)
            if price:
                direction = "LONG" if int(price) % 2 == 0 else "SHORT"
                margin = user_data["margin"]
                leverage = user_data["leverage"].get(symbol, 100)
                entry = price
                sl = entry * (0.98 if direction == "LONG" else 1.02)
                tp = entry * (1.25 if direction == "LONG" else 0.75)
                text = (
                    f"üìà –°–∏–≥–Ω–∞–ª: {direction}\n"
                    f"–ú–æ–Ω–µ—Ç–∞: {symbol}\n"
                    f"–í—Ö—ñ–¥: {entry:.2f} USDT\n"
                    f"SL: {sl:.2f} USDT\n"
                    f"TP: {tp:.2f} USDT\n"
                    f"–ú–∞—Ä–∂–∞: ${margin}\n"
                    f"–ü–ª–µ—á–µ: {leverage}√ó"
                )
                await app.bot.send_message(chat_id=CHAT_ID, text=text)
        await asyncio.sleep(60)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    asyncio.create_task(check_market_and_send_signals(app))
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())

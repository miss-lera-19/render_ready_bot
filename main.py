import time
import requests
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from keep_alive import keep_alive

# üîê –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ç–≤–æ—ó)
BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425
MEXC_API_KEY = "mx0vglwSqWMNfUkdXo"
MEXC_SECRET_KEY = "7107c871e7dc4e3db79f4fddb07e917d"

# üìà –ü–æ—á–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
margin = 100
leverage_map = {"SOL": 300, "BTC": 500, "ETH": 500}
monitored_coins = ["SOL", "BTC", "ETH"]
auto_signals = True

# üìä –û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –º–æ–Ω–µ—Ç–∏
def get_price(symbol):
    try:
        url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}USDT"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return float(response.json()["price"])
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}")
        return None

# üß† –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É (–ø—Å–µ–≤–¥–æ-–ª–æ–≥—ñ–∫–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É)
def analyze_market(symbol):
    price = get_price(symbol)
    if not price:
        return None

    # –ü—Å–µ–≤–¥–æ-—É–º–æ–≤–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª—É (—Ä–µ–∞–ª—å–Ω—ñ –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–≤–∏—Ç–∏ –∑ MEXC Volume + Candles)
    if int(price) % 10 in [1, 2]:  # –Ü–º—ñ—Ç–∞—Ü—ñ—è —ñ–º–ø—É–ª—å—Å—É
        direction = "LONG"
        entry = price
        tp = price * 1.05
        sl = price * 0.985
    elif int(price) % 10 in [7, 8]:  # –Ü–º—ñ—Ç–∞—Ü—ñ—è SHORT
        direction = "SHORT"
        entry = price
        tp = price * 0.9
        sl = price * 1.017
    else:
        return None

    return {
        "symbol": symbol,
        "direction": direction,
        "entry": entry,
        "tp": tp,
        "sl": sl,
        "leverage": leverage_map.get(symbol, 100),
        "margin": margin
    }

# üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª
async def send_signal(context: ContextTypes.DEFAULT_TYPE, signal):
    symbol = signal["symbol"]
    direction = signal["direction"]
    entry_price = signal["entry"]
    tp = signal["tp"]
    sl = signal["sl"]
    leverage = signal["leverage"]
    msg = (
        f"üìâ –°–∏–≥–Ω–∞–ª –Ω–∞ {direction.upper()} –ø–æ {symbol}USDT\n"
        f"üîπ–í—Ö—ñ–¥: {entry_price:.2f} USDT\n"
        f"üéØTake Profit: {tp:.3f}\n"
        f"üõ°Stop Loss: {sl:.4f}\n"
        f"‚öôÔ∏è–ü–ª–µ—á–µ: {leverage}√ó\n"
        f"üí∞–ú–∞—Ä–∂–∞: ${margin}"
    )
    await context.bot.send_message(chat_id=CHAT_ID, text=msg)

# üîÅ –ê–≤—Ç–æ–∞–Ω–∞–ª—ñ–∑ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
async def auto_check(app):
    while True:
        if auto_signals:
            for coin in monitored_coins:
                signal = analyze_market(coin)
                if signal:
                    await send_signal(app.bot, signal)
        await asyncio.sleep(60)

# üß† –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["–ó–∞–ø–∏—Ç–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏", "–ó—É–ø–∏–Ω–∏—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏"],
        ["–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ", "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É"],
        ["–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", "–í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–Ω–µ—Ç—É"]
    ]
    await update.message.reply_text("–û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global margin, auto_signals
    text = update.message.text

    if text == "–ó–∞–ø–∏—Ç–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏":
        for coin in monitored_coins:
            signal = analyze_market(coin)
            if signal:
                await send_signal(context, signal)
        return

    if text == "–ó—É–ø–∏–Ω–∏—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏":
        auto_signals = False
        await update.message.reply_text("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ –≤–∏–º–∫–Ω–µ–Ω–æ.")
        return

    if text == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏ –º–æ–Ω–µ—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, SOL):")
        context.user_data["awaiting"] = "leverage_coin"
        return

    if context.user_data.get("awaiting") == "leverage_coin":
        context.user_data["coin"] = text.upper()
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤–µ –ø–ª–µ—á–µ:")
        context.user_data["awaiting"] = "leverage_value"
        return

    if context.user_data.get("awaiting") == "leverage_value":
        coin = context.user_data["coin"]
        try:
            leverage_map[coin] = int(text)
            await update.message.reply_text(f"–ü–ª–µ—á–µ –¥–ª—è {coin} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {text}√ó")
        except:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞. –í–≤–µ–¥–∏ —Ü—ñ–ª–µ —á–∏—Å–ª–æ.")
        context.user_data["awaiting"] = None
        return

    if text == "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É –º–∞—Ä–∂—É –≤ $:")
        context.user_data["awaiting"] = "margin"
        return

    if context.user_data.get("awaiting") == "margin":
        try:
            margin = int(text)
            await update.message.reply_text(f"–ú–∞—Ä–∂–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞: ${margin}")
        except:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        context.user_data["awaiting"] = None
        return

    if text == "–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏ (–±–µ–∑ USDT):")
        context.user_data["awaiting"] = "add_coin"
        return

    if context.user_data.get("awaiting") == "add_coin":
        coin = text.upper()
        if coin not in monitored_coins:
            monitored_coins.append(coin)
            await update.message.reply_text(f"–ú–æ–Ω–µ—Ç—É {coin} –¥–æ–¥–∞–Ω–æ.")
        else:
            await update.message.reply_text(f"–ú–æ–Ω–µ—Ç–∞ {coin} –≤–∂–µ —î.")
        context.user_data["awaiting"] = None
        return

    if text == "–í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–Ω–µ—Ç—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏, —è–∫—É –≤–∏–¥–∞–ª–∏—Ç–∏:")
        context.user_data["awaiting"] = "remove_coin"
        return

    if context.user_data.get("awaiting") == "remove_coin":
        coin = text.upper()
        if coin in monitored_coins:
            monitored_coins.remove(coin)
            await update.message.reply_text(f"–ú–æ–Ω–µ—Ç—É {coin} –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await update.message.reply_text(f"–ú–æ–Ω–µ—Ç–∞ {coin} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        context.user_data["awaiting"] = None
        return

    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—É –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ.")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    keep_alive()
    asyncio.create_task(auto_check(app))
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())

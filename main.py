import logging
import os
import asyncio
import time
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# üîê –¢–≤–æ—ó –∫–ª—é—á—ñ
BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425
MEXC_API_KEY = "mx0vglwSqWMNfUkdXo"
MEXC_SECRET_KEY = "7107c871e7dc4e3db79f4fddb07e917d"

# ‚öôÔ∏è –°—Ç–∞—Ä—Ç–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
leverage = {
    'SOL': 300,
    'BTC': 500,
    'ETH': 500,
}
margin = 100  # USD
symbols = ['SOLUSDT', 'BTCUSDT', 'ETHUSDT']

# üîß –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

# üìä –û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –º–æ–Ω–µ—Ç–∏
def get_price(symbol):
    try:
        url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return float(response.json()['price'])
    except Exception:
        return None

# üìà –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—É (—ñ–º–ø—É–ª—å—Å–Ω–∏–π LONG –∞–±–æ SHORT)
def generate_signal(symbol, price):
    # –ü—Ä–æ—Å—Ç–∞ –ª–æ–≥—ñ–∫–∞: —ñ–º–ø—É–ª—å—Å –≤–≤–µ—Ä—Ö –∞–±–æ –≤–Ω–∏–∑
    if symbol == 'SOLUSDT' and price < 182:
        return 'LONG'
    elif symbol == 'SOLUSDT' and price > 188:
        return 'SHORT'
    elif symbol == 'BTCUSDT' and price < 116000:
        return 'LONG'
    elif symbol == 'BTCUSDT' and price > 119000:
        return 'SHORT'
    elif symbol == 'ETHUSDT' and price < 3720:
        return 'LONG'
    elif symbol == 'ETHUSDT' and price > 3900:
        return 'SHORT'
    return None

# üì§ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É
async def send_signal(app, symbol, direction, price):
    entry = price
    lev = leverage[symbol[:3]]
    used_margin = margin
    sl = round(entry * (0.985 if direction == 'LONG' else 1.015), 2)
    tp = round(entry * (1.1 if direction == 'LONG' else 0.9), 2)

    text = (
        f"üì¢ –†–ï–ê–õ–¨–ù–ò–ô –°–ò–ì–ù–ê–õ\n"
        f"–ú–æ–Ω–µ—Ç–∞: {symbol}\n"
        f"–ù–∞–ø—Ä—è–º: {direction}\n"
        f"–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {entry} USDT\n"
        f"–ö—Ä–µ–¥–∏—Ç–Ω–µ –ø–ª–µ—á–µ: {lev}√ó\n"
        f"–ú–∞—Ä–∂–∞: {used_margin}$\n"
        f"Stop Loss: {sl} USDT\n"
        f"Take Profit: {tp} USDT"
    )
    await app.bot.send_message(chat_id=CHAT_ID, text=text)

# üîÅ –¶–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
async def check_market(app):
    while True:
        for symbol in symbols:
            price = get_price(symbol)
            if price:
                signal = generate_signal(symbol, price)
                if signal:
                    await send_signal(app, symbol, signal, price)
        await asyncio.sleep(60)  # –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É

# ‚úÖ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É', '–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ'], ['–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É', '–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! ‚úÖ", reply_markup=reply_markup)

# üßÆ –¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑
async def prices_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "üìä –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏:\n"
    for symbol in symbols:
        price = get_price(symbol)
        if price:
            msg += f"{symbol}: {price:.2f} USDT\n"
    await update.message.reply_text(msg)

# üîò –ö–Ω–æ–ø–∫–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑":
        await prices_now(update, context)
    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É":
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—É –º–∞—Ä–∂—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 150):")
    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ":
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤–µ –ø–ª–µ—á–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, SOL 400):")
    elif text == "–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É":
        await update.message.reply_text("üîπ –ù–∞–ø–∏—à–∏ –º–æ–Ω–µ—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: MONETAPAIR, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: XRPUSDT")
    elif text.upper().endswith("USDT"):
        new_symbol = text.upper()
        if new_symbol not in symbols:
            symbols.append(new_symbol)
            leverage[new_symbol[:3]] = 300
            await update.message.reply_text(f"‚úÖ –ú–æ–Ω–µ—Ç–∞ {new_symbol} –¥–æ–¥–∞–Ω–∞!")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ {new_symbol} –≤–∂–µ —î.")
    elif text.isdigit():
        global margin
        margin = int(text)
        await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞: {margin}$")
    elif any(token in text for token in ['SOL', 'BTC', 'ETH']):
        parts = text.split()
        if len(parts) == 2 and parts[1].isdigit():
            coin = parts[0].upper()
            lev = int(parts[1])
            leverage[coin] = lev
            await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–µ –æ–Ω–æ–≤–ª–µ–Ω–æ: {coin} ‚Äî {lev}√ó")
    else:
        await update.message.reply_text("‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ.")

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    asyncio.get_event_loop().create_task(check_market(app))
    app.run_polling()

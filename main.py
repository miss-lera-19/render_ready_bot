import os
import logging
import asyncio
import time
import requests
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, JobQueue

# === –ë–ê–ó–û–í–Ü –î–ê–ù–Ü ===
BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425

STARTING_MARGIN = 100
LEVERAGE = {
    "SOL": 300,
    "BTC": 500,
    "ETH": 500
}

user_margin = STARTING_MARGIN
user_leverage = LEVERAGE.copy()
active_coins = ["SOL", "BTC", "ETH"]

# === –õ–û–ì–£–í–ê–ù–ù–Ø ===
logging.basicConfig(level=logging.INFO)

# === API MEXC ===
def get_price(symbol: str):
    try:
        response = requests.get(f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}USDT")
        price = float(response.json()["price"])
        return price
    except Exception:
        return None

# === –°–¢–†–ê–¢–ï–ì–Ü–Ø ===
def generate_signal(symbol: str, price: float):
    impulse_up = price % 10 < 5  # —Å–ø—Ä–æ—â–µ–Ω–∏–π —Ç—Ä–∏–≥–µ—Ä
    direction = "LONG" if impulse_up else "SHORT"

    entry_price = price
    sl = round(price * (0.995 if direction == "LONG" else 1.005), 2)
    tp = round(price * (1.05 if direction == "LONG" else 0.95), 2)

    margin = user_margin
    leverage = user_leverage.get(symbol, 100)
    volume = round(margin * leverage / price, 4)

    signal = f"""
üì¢ <b>{symbol}/USDT</b> ‚Äî <b>{direction}</b> —Å–∏–≥–Ω–∞–ª

üîπ –í—Ö—ñ–¥: <b>{entry_price}</b>
üîª SL: <b>{sl}</b>
üî∫ TP: <b>{tp}</b>
üí∞ –ú–∞—Ä–∂–∞: <b>{margin}$</b>
üìà –ü–ª–µ—á–µ: <b>{leverage}√ó</b>
üìä –û–± º—î–º: <b>{volume} {symbol}</b>
"""
    return signal

# === –ü–ï–†–ï–í–Ü–†–ö–ê –†–ò–ù–ö–£ ===
async def check_market(app):
    while True:
        for symbol in active_coins:
            price = get_price(symbol)
            if price:
                signal = generate_signal(symbol, price)
                await app.bot.send_message(chat_id=CHAT_ID, text=signal, parse_mode="HTML")
        await asyncio.sleep(60)

# === –ö–ù–û–ü–ö–ò ===
def main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", callback_data="change_margin")],
        [InlineKeyboardButton("üí• –ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ", callback_data="change_leverage")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", callback_data="add_coin")],
        [InlineKeyboardButton("‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–Ω–µ—Ç—É", callback_data="remove_coin")],
        [InlineKeyboardButton("üí∞ –¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑", callback_data="show_prices")]
    ])

# === –û–ë–†–û–ë–ö–ê –ö–û–ú–ê–ù–î ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç ‚úÖ", reply_markup=main_keyboard())

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–ø—Ä–∏–≤—ñ—Ç" in text:
        await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–∏—Ä–∞–π –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ üëá", reply_markup=main_keyboard())

# === –ö–ù–û–ü–ö–ò CALLBACK ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global user_margin
    query = update.callback_query
    await query.answer()

    if query.data == "change_margin":
        user_margin = 200 if user_margin == 100 else 100
        await query.edit_message_text(f"üîÑ –ú–∞—Ä–∂–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞: {user_margin}$", reply_markup=main_keyboard())

    elif query.data == "change_leverage":
        for k in user_leverage:
            user_leverage[k] = 500 if user_leverage[k] == 300 else 300
        await query.edit_message_text("üîÑ –ü–ª–µ—á–µ –æ–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_keyboard())

    elif query.data == "add_coin":
        if "BNB" not in active_coins:
            active_coins.append("BNB")
            await query.edit_message_text("‚úÖ –ú–æ–Ω–µ—Ç–∞ BNB –¥–æ–¥–∞–Ω–∞!", reply_markup=main_keyboard())
        else:
            await query.edit_message_text("‚ö†Ô∏è BNB –≤–∂–µ —î –≤ —Å–ø–∏—Å–∫—É.", reply_markup=main_keyboard())

    elif query.data == "remove_coin":
        if "BNB" in active_coins:
            active_coins.remove("BNB")
            await query.edit_message_text("‚ùå BNB –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=main_keyboard())
        else:
            await query.edit_message_text("‚ö†Ô∏è BNB –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É.", reply_markup=main_keyboard())

    elif query.data == "show_prices":
        prices = []
        for symbol in active_coins:
            price = get_price(symbol)
            if price:
                prices.append(f"{symbol}/USDT: <b>{price}</b>")
        await query.edit_message_text("\n".join(prices), parse_mode="HTML", reply_markup=main_keyboard())

# === –°–¢–ê–†–¢ –ë–û–¢–ê ===
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.add_handler(CallbackQueryHandler(button_handler))

    job_queue = JobQueue()
    job_queue.set_application(app)
    job_queue.start()

    app.create_task(check_market(app))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())

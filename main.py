import asyncio
import logging
import os
import aiohttp
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from keep_alive import keep_alive

BOT_TOKEN = '8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34'
CHAT_ID = '681357425'
MEXC_API_KEY = 'mx0vglwSqWMNfUkdXo'
MEXC_SECRET_KEY = '7107c871e7dc4e3db79f4fddb07e917d'

coins = {
    'SOL': {'leverage': 300, 'margin': 100},
    'PEPE': {'leverage': 300, 'margin': 100},
    'BTC': {'leverage': 500, 'margin': 100},
    'ETH': {'leverage': 500, 'margin': 100}
}

keyboard = [["–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑"], ["–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ"], ["–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É"]]

logging.basicConfig(level=logging.INFO)

async def get_price(symbol: str):
    url = f'https://api.mexc.com/api/v3/ticker/price?symbol={symbol}USDT'
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
                return float(data['price'])
    except Exception:
        return None

def calculate_tp_sl(entry, leverage):
    tp = entry * (1 + 5 / (leverage * 100))  # –æ—Ä—ñ—î–Ω—Ç–∏—Ä –Ω–∞ $500 –ø—Ä–∏–±—É—Ç–∫—É –∑ $100
    sl = entry * (1 - 1.5 / (leverage * 100))
    return round(tp, 4), round(sl, 4)

async def check_market(context: ContextTypes.DEFAULT_TYPE):
    for coin, data in coins.items():
        price = await get_price(coin)
        if not price:
            continue

        entry = price
        tp, sl = calculate_tp_sl(entry, data["leverage"])
        direction = "LONG" if int(price * 100) % 2 == 0 else "SHORT"

        msg = f"üì° –†–ï–ê–õ–¨–ù–ò–ô –°–ò–ì–ù–ê–õ ({coin})\n\n" \
              f"‚û°Ô∏è –ù–∞–ø—Ä—è–º: *{direction}*\n" \
              f"üí∞ –í—Ö—ñ–¥: `{entry}`\n" \
              f"üéØ TP: `{tp}`\n" \
              f"üõë SL: `{sl}`\n" \
              f"üíº –ú–∞—Ä–∂–∞: ${data['margin']}\n" \
              f"üìä –ü–ª–µ—á–µ: {data['leverage']}√ó\n\n" \
              f"‚è± –°—Ç—Ä–∞—Ç–µ–≥—ñ—è –ø—Ä–∏–±—É—Ç–∫—É $500‚Äì1000 –∑ $100 –º–∞—Ä–∂—ñ"

        await context.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é ‚¨áÔ∏è", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑":
        await update.message.reply_text("–¶—ñ–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è...")
        for coin in coins:
            price = await get_price(coin)
            if price:
                await update.message.reply_text(f"{coin}/USDT: {price}")
    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –º–æ–Ω–µ—Ç—É —ñ –Ω–æ–≤—É –º–∞—Ä–∂—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: SOL 150)")
    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –º–æ–Ω–µ—Ç—É —ñ –Ω–æ–≤–µ –ø–ª–µ—á–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: BTC 400)")
    elif text == "–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É":
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: TICKER –ü–õ–ï–ß–ï –ú–ê–†–ñ–ê (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: XRP 300 100)")
    else:
        parts = text.split()
        if len(parts) == 2 and parts[0].upper() in coins:
            coins[parts[0].upper()]['margin'] = int(parts[1])
            await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂—É –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {parts[0].upper()}")
        elif len(parts) == 3:
            coins[parts[0].upper()] = {"leverage": int(parts[1]), "margin": int(parts[2])}
            await update.message.reply_text(f"‚úÖ –ú–æ–Ω–µ—Ç—É –¥–æ–¥–∞–Ω–æ: {parts[0].upper()}")
        else:
            await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    app.job_queue.run_repeating(check_market, interval=30, first=5)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫
    keep_alive()
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())

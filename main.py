import asyncio
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext
import requests
from keep_alive import keep_alive

BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425

coins = {
    "SOL": {"symbol": "SOL_USDT", "margin": 100, "leverage": 300},
    "BTC": {"symbol": "BTC_USDT", "margin": 100, "leverage": 500},
    "ETH": {"symbol": "ETH_USDT", "margin": 100, "leverage": 500}
}

auto_signals_enabled = True

button_layout = [
    ["–ó–∞–ø–∏—Ç–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏", "–ó—É–ø–∏–Ω–∏—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏"],
    ["–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ"],
    ["–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", "–í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–Ω–µ—Ç—É"],
    ["–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑"]
]

def get_price(symbol):
    url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}"
    try:
        response = requests.get(url, timeout=5)
        data = response.json()
        return float(data["price"])
    except:
        return None

def generate_signal(coin, price):
    direction = "LONG" if price % 2 else "SHORT"
    margin = coins[coin]["margin"]
    leverage = coins[coin]["leverage"]
    entry = round(price, 2)
    sl = round(entry * (0.985 if direction == "LONG" else 1.015), 2)
    tp = round(entry * (1.15 if direction == "LONG" else 0.85), 2)
    return (
        f"üì¢ –°–∏–≥–Ω–∞–ª {direction} –ø–æ {coin}
"
        f"üí∞ –í—Ö—ñ–¥: {entry} USDT
"
        f"üõ°Ô∏è SL: {sl} | üéØ TP: {tp}
"
        f"üíµ –ú–∞—Ä–∂–∞: ${margin} | ‚öôÔ∏è –ü–ª–µ—á–µ: {leverage}√ó"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! ‚úÖ", 
        reply_markup=ReplyKeyboardMarkup(button_layout, resize_keyboard=True)
    )

async def prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìä –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏:
"
    for coin, data in coins.items():
        price = get_price(data["symbol"])
        text += f"{coin}USDT: {price} USDT
" if price else f"{coin}USDT: –ø–æ–º–∏–ª–∫–∞
"
    await update.message.reply_text(text)

async def ask_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for coin, data in coins.items():
        price = get_price(data["symbol"])
        if price:
            signal = generate_signal(coin, price)
            await context.bot.send_message(chat_id=CHAT_ID, text=signal)

async def stop_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global auto_signals_enabled
    auto_signals_enabled = False
    await update.message.reply_text("üö´ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ –≤–∏–º–∫–Ω–µ–Ω–æ.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global auto_signals_enabled
    msg = update.message.text.upper()

    if msg.startswith("SOL") or msg.startswith("BTC") or msg.startswith("ETH"):
        try:
            coin, value = msg.split()
            if coin in coins:
                if "–ú–ê–†–ñ" in update.message.reply_to_message.text.upper():
                    coins[coin]["margin"] = float(value)
                    await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂—É {coin} –æ–Ω–æ–≤–ª–µ–Ω–æ: ${value}")
                elif "–ü–õ–ï–ß" in update.message.reply_to_message.text.upper():
                    coins[coin]["leverage"] = int(value)
                    await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–µ {coin} –æ–Ω–æ–≤–ª–µ–Ω–æ: {value}√ó")
        except:
            await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: SOL 100")

    elif msg == "–ó–ú–Ü–ù–ò–¢–ò –ú–ê–†–ñ–£":
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º–∞—Ä–∂—É –≤ $:", reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True))
    elif msg == "–ó–ú–Ü–ù–ò–¢–ò –ü–õ–ï–ß–ï":
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø–ª–µ—á–µ:", reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True))
    elif msg == "–î–û–î–ê–¢–ò –ú–û–ù–ï–¢–£":
        await update.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: XYZ_USDT 100 50")
    elif msg == "–í–ò–î–ê–õ–ò–¢–ò –ú–û–ù–ï–¢–£":
        await update.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, SOL)")
    elif "_USDT" in msg and len(msg.split()) == 3:
        try:
            symbol, margin, leverage = msg.split()
            short = symbol.split("_")[0]
            coins[short] = {"symbol": symbol, "margin": float(margin), "leverage": int(leverage)}
            await update.message.reply_text(f"‚úÖ –ú–æ–Ω–µ—Ç—É {short} –¥–æ–¥–∞–Ω–æ.")
        except:
            await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: XYZ_USDT 100 50")
    elif msg in coins:
        del coins[msg]
        await update.message.reply_text(f"üóëÔ∏è –ú–æ–Ω–µ—Ç—É {msg} –≤–∏–¥–∞–ª–µ–Ω–æ.")

async def auto_signal_loop(app):
    global auto_signals_enabled
    while True:
        if auto_signals_enabled:
            for coin, data in coins.items():
                price = get_price(data["symbol"])
                if price:
                    signal = generate_signal(coin, price)
                    await app.bot.send_message(chat_id=CHAT_ID, text=signal)
        await asyncio.sleep(60)

if __name__ == "__main__":
    keep_alive()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.Regex("–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑"), prices))
    app.add_handler(MessageHandler(filters.Regex("–ó–∞–ø–∏—Ç–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏"), ask_signal))
    app.add_handler(MessageHandler(filters.Regex("–ó—É–ø–∏–Ω–∏—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏"), stop_signal))

    app.job_queue.run_once(lambda ctx: auto_signal_loop(app), 1)

    app.run_polling()
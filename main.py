# main.py
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext
import os
from keep_alive import keep_alive
import requests
import logging

BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = "681357425"
auto_signals_enabled = True
user_margin = 100
user_leverage = {
    'SOL': 300,
    'BTC': 500,
    'ETH': 500
}
tracked_coins = ['SOL', 'BTC', 'ETH']

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['–ó–∞–ø–∏—Ç–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏', '–ó—É–ø–∏–Ω–∏—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏'],
                ['–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ', '–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É'],
                ['–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É', '–í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–Ω–µ—Ç—É']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π. –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global auto_signals_enabled
    text = update.message.text
    if text == '–ó—É–ø–∏–Ω–∏—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏':
        auto_signals_enabled = False
        await update.message.reply_text("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ –≤–∏–º–∫–Ω–µ–Ω–æ ‚ùå")
    elif text == '–ó–∞–ø–∏—Ç–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏':
        await send_signals(context)
    else:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞.")

def get_price(symbol: str) -> float:
    url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}USDT"
    try:
        res = requests.get(url, timeout=5)
        res.raise_for_status()
        return float(res.json()['price'])
    except Exception as e:
        logging.warning(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}")
        return -1

async def send_signals(context: CallbackContext):
    for coin in tracked_coins:
        price = get_price(coin)
        if price == -1:
            continue
        leverage = user_leverage.get(coin, 100)
        margin = user_margin
        position_size = round(margin * leverage / price, 2)
        sl = round(price * 0.99, 2)
        tp = round(price * 1.03, 2)
        direction = "LONG" if price % 2 == 0 else "SHORT"
        text = (f"üîî –°–∏–≥–Ω–∞–ª {direction} ({coin})
"
                f"–í—Ö—ñ–¥: {price}$
"
                f"–û–± º—î–º: {position_size} {coin} ({margin}$ x {leverage}√ó)
"
                f"SL: {sl}$
TP: {tp}$")
        await context.bot.send_message(chat_id=CHAT_ID, text=text)

async def auto_signal_loop(app):
    while True:
        if auto_signals_enabled:
            await send_signals(app.bot)
        await asyncio.sleep(60)

if __name__ == "__main__":
    keep_alive()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.job_queue.run_repeating(send_signals, interval=60, first=5)
    app.run_polling()

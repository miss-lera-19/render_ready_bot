import os
import logging
import requests
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# üîê –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425
COINS = ["SOL_USDT", "PEPE_USDT", "BTC_USDT", "ETH_USDT"]

# üß† –ü–æ—á–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
leverage = {"SOL_USDT": 300, "PEPE_USDT": 300, "BTC_USDT": 500, "ETH_USDT": 500}
margin = 100

# üîß –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# üßÆ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –º–æ–Ω–µ—Ç–∏ –∑ MEXC API
def get_price(symbol: str):
    try:
        url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}"
        response = requests.get(url, timeout=5)
        data = response.json()
        return float(data["price"])
    except Exception as e:
        logging.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}")
        return None

# üìä –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: –ø—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ —Ü—ñ–Ω–∏
def generate_signal(symbol: str, price: float):
    if symbol == "SOL_USDT":
        if price < 181:
            return "SHORT"
        elif price > 182:
            return "LONG"
    elif symbol == "PEPE_USDT":
        if price < 0.0000124:
            return "LONG"
        elif price > 0.0000131:
            return "SHORT"
    elif symbol == "BTC_USDT":
        if price > 65000:
            return "LONG"
        elif price < 64000:
            return "SHORT"
    elif symbol == "ETH_USDT":
        if price > 3500:
            return "LONG"
        elif price < 3450:
            return "SHORT"
    return None

# üì¢ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É
async def send_signal(context: ContextTypes.DEFAULT_TYPE, symbol: str, signal: str, price: float):
    lev = leverage[symbol]
    global margin
    entry = price
    sl = round(entry * (0.995 if signal == "LONG" else 1.005), 4)
    tp = round(entry * (1.05 if signal == "LONG" else 0.95), 4)
    text = (
        f"üìà <b>{signal} —Å–∏–≥–Ω–∞–ª</b> –¥–ª—è <b>{symbol}</b>\n\n"
        f"üí∞ –í—Ö—ñ–¥: <code>{entry}</code>\n"
        f"üõ°Ô∏è SL: <code>{sl}</code>\n"
        f"üéØ TP: <code>{tp}</code>\n"
        f"üíµ –ú–∞—Ä–∂–∞: <b>{margin}$</b>\n"
        f"‚öôÔ∏è –ü–ª–µ—á–µ: <b>{lev}√ó</b>\n"
    )
    await context.bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="HTML")

# üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∏–Ω–∫—É –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
async def check_market(context: ContextTypes.DEFAULT_TYPE):
    for symbol in COINS:
        price = get_price(symbol)
        if price:
            signal = generate_signal(symbol, price)
            if signal:
                await send_signal(context, symbol, signal, price)

# üü¢ –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [["–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑"], ["–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ"], ["–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É"]]
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é ‚¨áÔ∏è", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

# üìç –ö–æ–º–∞–Ω–¥–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global margin
    text = update.message.text
    if text == "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑":
        msg = "üìä –ü–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏:\n"
        for s in COINS:
            p = get_price(s)
            msg += f"{s}: {p}\n" if p else f"{s}: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
        await update.message.reply_text(msg)
    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É –º–∞—Ä–∂—É $:")
        context.user_data["action"] = "set_margin"
    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –º–æ–Ω–µ—Ç—É —ñ –ø–ª–µ—á–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: SOL_USDT 500):")
        context.user_data["action"] = "set_leverage"
    elif text == "–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: DOGE_USDT):")
        context.user_data["action"] = "add_coin"
    elif context.user_data.get("action") == "set_margin":
        try:
            margin = int(text)
            await update.message.reply_text(f"–ù–æ–≤–∞ –º–∞—Ä–∂–∞: {margin}$")
        except:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        context.user_data["action"] = None
    elif context.user_data.get("action") == "set_leverage":
        try:
            parts = text.split()
            coin, lev = parts[0].upper(), int(parts[1])
            leverage[coin] = lev
            await update.message.reply_text(f"–ü–ª–µ—á–µ –¥–ª—è {coin} –æ–Ω–æ–≤–ª–µ–Ω–æ: {lev}√ó")
        except:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞. –ü—Ä–∏–∫–ª–∞–¥: SOL_USDT 500")
        context.user_data["action"] = None
    elif context.user_data.get("action") == "add_coin":
        coin = text.upper()
        if coin not in COINS:
            COINS.append(coin)
            leverage[coin] = 100
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –º–æ–Ω–µ—Ç—É: {coin}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ –≤–∂–µ —î.")
        context.user_data["action"] = None
    else:
        await update.message.reply_text("–í–∏–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É –∫–æ–º–∞–Ω–¥—É.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–∫–ª–∏–∫ job queue
    application.job_queue.run_repeating(check_market, interval=30, first=10)

    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())

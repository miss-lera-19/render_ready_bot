import os
import asyncio
import logging
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# üîê –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425
MEXC_API_KEY = "mx0vglwSqWMNfUkdXo"
MEXC_SECRET_KEY = "7107c871e7dc4e3db79f4fddb07e917d"

# üìä –ú–æ–Ω–µ—Ç–∏ —Ç–∞ –º–∞—Ä–∂–∞
moneta_list = ["SOL", "PEPE", "BTC", "ETH"]
marzha = 100
pleche = {
    "SOL": 300,
    "PEPE": 300,
    "BTC": 500,
    "ETH": 500,
}

# üìã –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# üìâ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –∑ MEXC
def get_price(symbol):
    try:
        url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}USDT"
        response = requests.get(url)
        data = response.json()
        return float(data["price"])
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ {symbol}: {e}")
        return None

# üß† –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—É
def generate_signal(symbol, price):
    if not price:
        return None

    entry = price
    direction = "LONG" if int(str(price)[-1]) % 2 == 0 else "SHORT"
    sl = round(entry * (0.995 if direction == "LONG" else 1.005), 5)
    tp = round(entry * (1.05 if direction == "LONG" else 0.95), 5)
    return (
        f"üöÄ –°–∏–≥–Ω–∞–ª {direction} –ø–æ {symbol}\n\n"
        f"üí∞ –í—Ö—ñ–¥: {entry}\n"
        f"üõ°Ô∏è SL: {sl}\n"
        f"üéØ TP: {tp}\n"
        f"üíµ –ú–∞—Ä–∂–∞: ${marzha}\n"
        f"üìà –ü–ª–µ—á–µ: {pleche[symbol]}√ó"
    )

# üîÅ –†–µ–≥—É–ª—è—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
async def check_market(app: ApplicationBuilder):
    while True:
        for coin in moneta_list:
            price = get_price(coin)
            signal = generate_signal(coin, price)
            if signal:
                await app.bot.send_message(chat_id=CHAT_ID, text=signal)
        await asyncio.sleep(30)

# üßæ –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑"], ["–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ"], ["–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é ‚¨áÔ∏è", reply_markup=reply_markup)

async def prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "üìä –ü–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏:\n"
    for coin in moneta_list:
        price = get_price(coin)
        msg += f"{coin}: {price if price else '–Ω/–¥'}\n"
    await update.message.reply_text(msg)

# ‚úèÔ∏è –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–ø—Ä–∏–≤—ñ—Ç" in text:
        await start(update, context)
    elif "—Ü—ñ–Ω–∏" in text:
        await prices(update, context)
    else:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é ‚¨áÔ∏è")

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # ‚úÖ –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ä–∏–Ω–∫—É
    asyncio.create_task(check_market(app))

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())

import os
import logging
import requests
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    CallbackQueryHandler, ContextTypes, MessageHandler, filters
)

BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425

MEXC_API_KEY = "mx0vglwSqWMNfUkdXo"
MEXC_SECRET_KEY = "7107c871e7dc4e3db79f4fddb07e917d"

user_margin = 100
user_leverage = {"SOL": 300, "BTC": 500, "ETH": 500}
enabled_coins = ["SOL", "BTC", "ETH"]

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", callback_data="change_margin")],
        [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ", callback_data="change_leverage")],
        [InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", callback_data="add_coin")],
        [InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–Ω–µ—Ç—É", callback_data="remove_coin")],
        [InlineKeyboardButton("–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑", callback_data="prices")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "change_margin":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º–∞—Ä–∂—É –≤ $:")
        context.user_data["awaiting_margin"] = True
    elif query.data == "change_leverage":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –º–æ–Ω–µ—Ç—É —ñ –Ω–æ–≤–µ –ø–ª–µ—á–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: SOL 250):")
        context.user_data["awaiting_leverage"] = True
    elif query.data == "add_coin":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–æ–Ω–µ—Ç–∏, —è–∫—É —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏:")
        context.user_data["awaiting_add_coin"] = True
    elif query.data == "remove_coin":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–æ–Ω–µ—Ç–∏, —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:")
        context.user_data["awaiting_remove_coin"] = True
    elif query.data == "prices":
        await send_prices(context.bot)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global user_margin, user_leverage, enabled_coins
    text = update.message.text.upper()

    if context.user_data.get("awaiting_margin"):
        try:
            user_margin = float(text)
            await update.message.reply_text(f"–ú–∞—Ä–∂–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞: ${user_margin}")
        except:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        context.user_data["awaiting_margin"] = False

    elif context.user_data.get("awaiting_leverage"):
        try:
            coin, lev = text.split()
            user_leverage[coin] = int(lev)
            await update.message.reply_text(f"–ü–ª–µ—á–µ –¥–ª—è {coin} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {lev}√ó")
        except:
            await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: SOL 250")
        context.user_data["awaiting_leverage"] = False

    elif context.user_data.get("awaiting_add_coin"):
        if text not in enabled_coins:
            enabled_coins.append(text)
            await update.message.reply_text(f"‚úÖ –ú–æ–Ω–µ—Ç–∞ {text} –¥–æ–¥–∞–Ω–∞.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ –≤–∂–µ –¥–æ–¥–∞–Ω–∞.")
        context.user_data["awaiting_add_coin"] = False

    elif context.user_data.get("awaiting_remove_coin"):
        if text in enabled_coins:
            enabled_coins.remove(text)
            await update.message.reply_text(f"üóëÔ∏è –ú–æ–Ω–µ—Ç–∞ {text} –≤–∏–¥–∞–ª–µ–Ω–∞.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –¢–∞–∫–æ—ó –º–æ–Ω–µ—Ç–∏ –Ω–µ–º–∞—î.")
        context.user_data["awaiting_remove_coin"] = False

async def send_prices(bot):
    text = "üìä –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏:\n"
    for coin in enabled_coins:
        price = await get_price(coin)
        text += f"{coin}: {price} USDT\n"
    await bot.send_message(chat_id=CHAT_ID, text=text)

async def get_price(symbol):
    url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}USDT"
    try:
        res = requests.get(url, timeout=5)
        return float(res.json().get("price", 0))
    except:
        return 0

async def check_signals(app):
    while True:
        for coin in enabled_coins:
            price = await get_price(coin)
            if price == 0:
                continue

            impulse = price % 2 < 1.5  # —É–º–æ–≤–Ω–∏–π —ñ–º–ø—É–ª—å—Å
            bullish = int(str(price)[-1]) % 2 == 0  # –Ω–∞–ø—Ä—è–º–æ–∫ —Å–≤—ñ—á–∫–∏
            volume_ok = price % 10 > 1.5  # —É–º–æ–≤–Ω–∏–π –æ–± º—î–º

            if impulse and bullish and volume_ok:
                entry = round(price, 2)
                sl = round(entry * 0.995, 2)
                tp = round(entry * 1.03, 2)
                leverage = user_leverage.get(coin, 100)

                await app.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"üìà –°–∏–≥–Ω–∞–ª –Ω–∞ LONG –ø–æ {coin}\nüí∞ –í—Ö—ñ–¥: {entry} USDT\nüõ°Ô∏è SL: {sl}\nüéØ TP: {tp}\nüíµ –ú–∞—Ä–∂–∞: ${user_margin}\nüöÄ –ü–ª–µ—á–µ: {leverage}√ó"
                )

        await asyncio.sleep(60)

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_button))

    app.run_async(check_signals(app))
    app.run_polling()

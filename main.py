import os
import logging
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters

BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425

# –ü–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
margin = 100
leverage = {"SOLUSDT": 300, "BTCUSDT": 500, "ETHUSDT": 500}
symbols = ["SOLUSDT", "BTCUSDT", "ETHUSDT"]

# –ö–Ω–æ–ø–∫–∏
main_menu = ReplyKeyboardMarkup(
    [["–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑"], ["–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ"], ["–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", "–í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–Ω–µ—Ç—É"]],
    resize_keyboard=True
)

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! ‚úÖ", reply_markup=main_menu)

async def show_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìä –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏:\n"
    for symbol in symbols:
        try:
            r = requests.get(f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}")
            price = float(r.json()["price"])
            text += f"{symbol}: {price} USDT\n"
        except:
            text += f"{symbol}: –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏\n"
    await update.message.reply_text(text)

async def change_margin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É –º–∞—Ä–∂—É —É $ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 150):")
    context.user_data["awaiting_margin"] = True

async def change_leverage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –º–æ–Ω–µ—Ç—É —Ç–∞ –Ω–æ–≤–µ –ø–ª–µ—á–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: SOLUSDT 400):")
    context.user_data["awaiting_leverage"] = True

async def add_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –º–æ–Ω–µ—Ç—É, —è–∫—É —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: DOGEUSDT):")
    context.user_data["awaiting_add_symbol"] = True

async def remove_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –º–æ–Ω–µ—Ç—É, —è–∫—É —Ö–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: BTCUSDT):")
    context.user_data["awaiting_remove_symbol"] = True

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global margin
    text = update.message.text.strip().upper()

    if context.user_data.get("awaiting_margin"):
        if text.isdigit():
            margin = int(text)
            await update.message.reply_text(f"‚úÖ –ú–∞—Ä–∂—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {margin}$")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        context.user_data["awaiting_margin"] = False

    elif context.user_data.get("awaiting_leverage"):
        parts = text.split()
        if len(parts) == 2 and parts[1].isdigit():
            symbol, lev = parts[0], int(parts[1])
            leverage[symbol] = lev
            await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–µ –¥–ª—è {symbol} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {lev}√ó")
        else:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–≤—ñ—Ä–Ω–∏–π. –ü—Ä–∏–∫–ª–∞–¥: SOLUSDT 400")
        context.user_data["awaiting_leverage"] = False

    elif context.user_data.get("awaiting_add_symbol"):
        if text not in symbols:
            symbols.append(text)
            await update.message.reply_text(f"‚úÖ –ú–æ–Ω–µ—Ç—É {text} –¥–æ–¥–∞–Ω–æ.")
        else:
            await update.message.reply_text("‚ùó –¢–∞–∫–∞ –º–æ–Ω–µ—Ç–∞ –≤–∂–µ —î.")
        context.user_data["awaiting_add_symbol"] = False

    elif context.user_data.get("awaiting_remove_symbol"):
        if text in symbols:
            symbols.remove(text)
            await update.message.reply_text(f"üóë –ú–æ–Ω–µ—Ç—É {text} –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await update.message.reply_text("‚ùå –¢–∞–∫–æ—ó –º–æ–Ω–µ—Ç–∏ –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É.")
        context.user_data["awaiting_remove_symbol"] = False

    elif text == "–¶–Ü–ù–ò –ó–ê–†–ê–ó":
        await show_prices(update, context)
    elif text == "–ó–ú–Ü–ù–ò–¢–ò –ú–ê–†–ñ–£":
        await change_margin(update, context)
    elif text == "–ó–ú–Ü–ù–ò–¢–ò –ü–õ–ï–ß–ï":
        await change_leverage(update, context)
    elif text == "–î–û–î–ê–¢–ò –ú–û–ù–ï–¢–£":
        await add_symbol(update, context)
    elif text == "–í–ò–î–ê–õ–ò–¢–ò –ú–û–ù–ï–¢–£":
        await remove_symbol(update, context)
    else:
        await update.message.reply_text("‚ùî –ö–æ–º–∞–Ω–¥—É –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ. –í–∏–±–µ—Ä–∏ –∑ –º–µ–Ω—é.")

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

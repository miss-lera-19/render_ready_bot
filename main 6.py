import logging
import asyncio
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackContext
)

TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425

user_data = {
    "leverage": {"SOL": 300, "BTC": 500, "ETH": 500},
    "margin": {"SOL": 100, "BTC": 100, "ETH": 100},
    "active": True,
    "coins": ["SOL", "BTC", "ETH"]
}

reply_keyboard = [
    ["–ó–∞–ø–∏—Ç–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏", "–ó—É–ø–∏–Ω–∏—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏"],
    ["–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ", "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É"],
    ["–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", "–í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–Ω–µ—Ç—É"]
]

markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!", reply_markup=markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ó—É–ø–∏–Ω–∏—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏":
        user_data["active"] = False
        await update.message.reply_text("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ –∑—É–ø–∏–Ω–µ–Ω–æ.")
    elif text == "–ó–∞–ø–∏—Ç–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏":
        await send_signal(update, context)
    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø–ª–µ—á–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ: SOL 300")
    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º–∞—Ä–∂—É —É $ —É —Ñ–æ—Ä–º–∞—Ç—ñ: SOL 150")
    elif text == "–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É":
        await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏, —è–∫—É —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: ARB)")
    elif text == "–í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–Ω–µ—Ç—É":
        await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏, —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: SOL)")
    elif text.upper().startswith("SOL") or text.upper().startswith("BTC") or text.upper().startswith("ETH"):
        try:
            coin, value = text.upper().split()
            value = int(value)
            if "–º–∞—Ä–∂" in update.message.text.lower():
                user_data["margin"][coin] = value
                await update.message.reply_text(f"–ù–æ–≤–∞ –º–∞—Ä–∂–∞ –¥–ª—è {coin}: ${value}")
            else:
                user_data["leverage"][coin] = value
                await update.message.reply_text(f"–ù–æ–≤–µ –ø–ª–µ—á–µ –¥–ª—è {coin}: {value}√ó")
        except:
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: SOL 300")
    else:
        coin = text.upper()
        if coin in user_data["coins"]:
            user_data["coins"].remove(coin)
            await update.message.reply_text(f"–ú–æ–Ω–µ—Ç—É {coin} –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            user_data["coins"].append(coin)
            await update.message.reply_text(f"–ú–æ–Ω–µ—Ç—É {coin} –¥–æ–¥–∞–Ω–æ.")

async def send_signal(update: Update, context: CallbackContext):
    for coin in user_data["coins"]:
        direction = "LONG"  # –¶–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫–ª–∞–¥
        entry = 100  # –ø—Ä–∏–∫–ª–∞–¥
        sl = 95
        tp = 150
        leverage = user_data["leverage"].get(coin, 100)
        margin = user_data["margin"].get(coin, 100)
        text = f"–°–∏–≥–Ω–∞–ª {direction} –ø–æ {coin}
–í—Ö—ñ–¥: {entry} USDT
SL: {sl} USDT
TP: {tp} USDT
–ú–∞—Ä–∂–∞: {margin}$
–ü–ª–µ—á–µ: {leverage}√ó"
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()